---
alwaysApply: true
---

# React Router RSC Dashboard Template

## Overview

Experimental React Router v7 + RSC template.

**Tech Stack:** React 19, React Router v7 RSC, TypeScript, TailwindCSS v4, Vite, pnpm

## ⚠️ Entry Files - DO NOT MODIFY

The entry files (`entry.*.tsx`) are pre-configured for RSC and should **never be modified**:

- `entry.rsc.tsx` - React Server Components
- `entry.ssr.tsx` - Server-side rendering
- `entry.browser.tsx` - Client hydration

## Work Areas

Focus development in these directories:

- **`src/routes/`** - File-based routing, add routes to `config.ts`
- **`src/components/`** - Reusable components (create this directory as needed)

## Component Patterns

### Server Components (default)

```tsx
export default function MyPage() {
  return <div>Server content</div>;
}
```

### Client Components

```tsx
"use client";
export function InteractiveWidget() {
  return <button onClick={handler}>Click me</button>;
}
```

### Routes

```tsx
// src/routes/[name]/route.tsx
export default function RoutePage() {
  return <div>Page content</div>;
}

export function ErrorBoundary() {
  return <div>Error occurred</div>;
}
```

## Key Rules

- **Routing:** Add new routes to `src/routes/config.ts` with lazy imports
- **Server/Client:** Server components are default, use `"use client"` for interactivity
- **Styling:** TailwindCSS v4, layout: `max-w-screen-xl mx-auto px-4`
- **TypeScript:** Strict mode, proper type annotations
- **File naming:** `route.tsx`, `client.tsx`, `styles.css`

## Commands

- `pnpm dev` - Development
- `pnpm build` - Build
- `pnpm typecheck` - Type checking
